//Initialization in Toloka
//JS:
https://qiusihang.github.io/ticktalkturk/js/jquery.js
https://qiusihang.github.io/ticktalkturk/js/chatbot.js
https://lzhanggithub.github.io/client.js
//CSS:
https://qiusihang.github.io/ticktalkturk/style/client.css


// HTML 

<div id="container">
         <div id="history-container">
            <table id="chat-history"></table>
         </div>
         <div id="message-container"><textarea id="message" name="message" onkeydown="onKeyDown(event)" placeholder="Type your message here" rows="1"></textarea></div>
         <div id="send-button" onclick="click_send()"><img src="https://qiusihang.github.io/ticktalkturk/style/send.png" width="20px" style="vertical-align:middle"/></div>
         <div id="message-cover">Please reply the chatbot by selecting the option(s).</div>
            {{!-- <div style="font-size:16px;border:0px;background:rgba(0,0,0,0);color:#666666"><b>SUBMIT</b></div> --}}
            <textarea id="chat-answer" name="chat-answer" style="display:none"></textarea>
         </div>
      </div>

//JS

exports.Task = extend(TolokaHandlebarsTask, function (options) {
  TolokaHandlebarsTask.call(this, options);
//   window.onload = 
}, {
  onRender: function() {
    
    console.log(this.getOptions()['task']['input_values']['imageURL']);
      init(this.getOptions()['task']['input_values']['imageURL'],"https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fimages5.fanpop.com%2Fimage%2Fphotos%2F30200000%2Favatar-avatar-30214841-1440-900.jpg&f=1&nofb=1");
      // location.reload();
    // DOM element for task is formed (available via #getDOMElement()) 
  },
  validate: function(solution) {
        var errors = null;

        // If no words are selected, we show an error message.
        var res = reutrn_results();
        console.log(res);
        this.setSolutionOutputValue("result",res[res.length-1]);
        console.log(solution);
        submit();

        return errors || TolokaHandlebarsTask.prototype.validate.call(this, solution);
    }
,
  onDestroy: function() {
    // Task is completed. Global resources can be released (if used)
  }

});

function extend(ParentClass, constructorFunction, prototypeHash) {
  constructorFunction = constructorFunction || function () {};
  prototypeHash = prototypeHash || {};
  if (ParentClass) {
    constructorFunction.prototype = Object.create(ParentClass.prototype);
  }
  for (var i in prototypeHash) {
    constructorFunction.prototype[i] = prototypeHash[i];
  }
  return constructorFunction;
}



// Input fields
imageURL type : string/URL
result type : string
